name: windows
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request: {}
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        arch: [i686, x86_64, aarch64]
        #arch: [aarch64]
        os: [windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: false
      - name: Set up environment for windows-latest
        shell : bash
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "wget=C:\msys64\usr\bin\wget.exe" >> $GITHUB_ENV
          echo "unzip=unzip" >> $GITHUB_ENV
          if [ ${{ matrix.arch }} = "i686" ]; then
            echo "cmake_arch=Win32" >> $GITHUB_ENV
          elif [ ${{ matrix.arch }} = "x86_64" ]; then
            echo "cmake_arch=x64" >> $GITHUB_ENV
          else
            echo "cmake_arch=ARM64" >> $GITHUB_ENV
          fi
      - name: Set up environment for ubuntu-latest
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          echo "wget=wget" >> $GITHUB_ENV
          echo "unzip=unzip" >> $GITHUB_ENV
      - name: List build cache restore keys
        shell : bash
        run: |
          # Look for the last 9 build caches (GitHub supports max 10 including current one)
          for number in 1 2 3 4 5 6 7 8 9
          do
            id=$((${{ github.run_number }} - number))
            echo "cache_$number=windows-${{ github.ref }}-${{ matrix.arch }}-${{ matrix.os }}-$id" >> $GITHUB_ENV
          done
      - name: Handle build cache
        uses: actions/cache@v2
        with:
          path: |
            build
          key: windows-${{ github.ref }}-${{ matrix.arch }}-${{ matrix.os }}-${{ github.run_number }}
          restore-keys: |
            ${{ env.cache_1 }}
            ${{ env.cache_2 }}
            ${{ env.cache_3 }}
            ${{ env.cache_4 }}
            ${{ env.cache_5 }}
            ${{ env.cache_6 }}
            ${{ env.cache_7 }}
            ${{ env.cache_8 }}
            ${{ env.cache_9 }}
      - name: Install MinGW for i686 or x86_64
        if: ${{ matrix.os == 'ubuntu-latest' && ( matrix.arch == 'i686' || matrix.arch == 'x86_64' ) }}
        run: |
          cd /
          sudo mkdir -p /data/mxe/usr
          cd /data/mxe/usr
          # It's compiled from https://github.com/mxe/mxe
          sudo wget https://github.com/supertuxkart/dependencies/releases/download/preview/mxe_static_mingw.zip
          sudo unzip mxe_static_mingw.zip
          sudo rm mxe_static_mingw.zip
      - name: Install MinGW for aarch64
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64' }}
        run: |
          cd /
          sudo wget https://github.com/mstorsjo/llvm-mingw/releases/download/20210423/llvm-mingw-20210423-msvcrt-ubuntu-18.04-x86_64.tar.xz
          sudo tar xf llvm-mingw-20210423-msvcrt-ubuntu-18.04-x86_64.tar.xz
          sudo mv llvm-mingw-20210423-msvcrt-ubuntu-18.04-x86_64 llvm-mingw
      - name: Set up MinGW Toolchain for i686
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'i686' }}
        run: |
          echo "SET(CMAKE_SYSTEM_NAME Windows)" > toolchain.cmake
          echo "SET(CMAKE_C_COMPILER /data/mxe/usr/bin/i686-w64-mingw32.static.posix.dw2-gcc)" >> toolchain.cmake
          echo "SET(CMAKE_CXX_COMPILER /data/mxe/usr/bin/i686-w64-mingw32.static.posix.dw2-g++)" >> toolchain.cmake
          echo "SET(CMAKE_RC_COMPILER /data/mxe/usr/bin/i686-w64-mingw32.static.posix.dw2-windres)" >> toolchain.cmake
          echo "SET(CMAKE_FIND_ROOT_PATH \${PROJECT_SOURCE_DIR}/dependencies-win-i686 /data/mxe/usr/i686-w64-mingw32.static.posix.dw2/ /data/mxe/usr/lib/gcc/i686-w64-mingw32.static.posix.dw2/5.5.0/)" >> toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ALWAYS)" >> toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> toolchain.cmake
      - name: Set up MinGW Toolchain for x86_64
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64' }}
        run: |
          echo "SET(CMAKE_SYSTEM_NAME Windows)" > toolchain.cmake
          echo "SET(CMAKE_C_COMPILER /data/mxe/usr/bin/x86_64-w64-mingw32.static.posix.seh-gcc)" >> toolchain.cmake
          echo "SET(CMAKE_CXX_COMPILER /data/mxe/usr/bin/x86_64-w64-mingw32.static.posix.seh-g++)" >> toolchain.cmake
          echo "SET(CMAKE_RC_COMPILER /data/mxe/usr/bin/x86_64-w64-mingw32.static.posix.seh-windres)" >> toolchain.cmake
          echo "SET(CMAKE_FIND_ROOT_PATH \${PROJECT_SOURCE_DIR}/dependencies-win-x86_64 /data/mxe/usr/x86_64-w64-mingw32.static.posix.seh/ /data/mxe/usr/lib/gcc/x86_64-w64-mingw32.static.posix.seh/5.5.0/)" >> toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ALWAYS)" >> toolchain.cmake
          echo "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> toolchain.cmake
      # Manually specify CMAKE_SYSTEM_PROCESSOR, it can only be set together with -DDCMAKE_SYSTEM_NAME
      - name: Configure bulid for MSVC
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          mkdir -Force build
          cd build
          cmake ../occlusion_culling -G "Visual Studio 17 2022" -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=${{ matrix.arch }} -A ${{ env.cmake_arch }} -DCHECK_ASSETS=OFF
      - name: Configure bulid for MinGW (i686 or x86_64)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch != 'aarch64' }}
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../toolchain.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCHECK_ASSETS=OFF -DUSE_DIRECTX=ON
      - name: Configure bulid for MinGW (aarch64)
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64' }}
        run: |
          mkdir -p build
          cd build
          cmake .. -DLLVM_ARCH=aarch64 -DLLVM_PREFIX=/llvm-mingw -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-llvm-mingw.cmake -DCHECK_ASSETS=OFF -DUSE_DIRECTX=ON
      - name: Build for MSVC
        if: ${{ matrix.os == 'windows-latest' }}
        working-directory: build
        run: |
          cmake --build . --config Debug
      - name: Build for MinGW
        if: ${{ matrix.os == 'ubuntu-latest' }}
        working-directory: build
        run: |
          make -j4
          cd ..
          mv COPYING tools
